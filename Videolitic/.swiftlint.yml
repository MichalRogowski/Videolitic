disabled_rules: # rule identifiers to exclude from running

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#closure-body-length
- closure_body_length

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#cyclomatic-complexity
- cyclomatic_complexity

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#discouraged-object-literal
- discouraged_object_literal

# Rationale: Doesn't really add any clarity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-acl
- explicit_acl

# Rationale: Heavy handed in telling someone how to code.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-enum-raw-value
- explicit_enum_raw_value

# Rationale: Doesn't really add any clarity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-self
- explicit_self

# Rationale: Doesn't really add any clarity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-top-level-acl
- explicit_top_level_acl

# Rationale: We don't want to fight the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-type-interface
- explicit_type_interface

# Rationale: Unclear on what it enforces.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#extension-access-modifier
- extension_access_modifier

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#file-line-length
- file_length

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#file-name
- file_name

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#function-body-length
- function_body_length

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#function-default-parameter-at-end
- function_default_parameter_at_end

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#function-parameter-count
- function_parameter_count

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#identifier-name
- identifier_name

# Rationale: Being consise and not fighting the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#implicit-return
- implicit_return

# Rationale: When setting values in a convenience initialiser or `deinit` method, related `didSet` and `willSet` won't be called. The workaround for this is to wrap them in a defer block. The concept is explained here: https://stackoverflow.com/a/33979852/4523166.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#inert-defer
- inert_defer

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#large-tuple
- large_tuple

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#variable-declaration-whitespace
- let_var_whitespace

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#line-length
- line_length

# Rationale: We don't write documentation.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#missing-docs
- missing_docs

# Rationale: Functions with parameters followed by multiple closures trigger this warning when placed on separate lines. The default Xcode formatting for this behavior is inconsistent, and auto indentation is poor.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiline-arguments
- multiline_arguments

# Rationale: Functions with closures followed by a parenthesis trigger this warning.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiline-arguments-brackets
- multiline_arguments_brackets

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiline-parameters-brackets
- multiline_parameters_brackets

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#nesting
- nesting

# Rationale: We don't use nimble.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#nimble-operator
- nimble_operator

# Rationale: Protocol conformance can require public declaration.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#no-extension-access-modifier
- no_extension_access_modifier

# Rationale: Heavy handed in telling someone how to program a specific way.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#no-grouping-extension
- no_grouping_extension

# Rationale: Arbitrary restriction. The default bundle will be suitable for most projects.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#nslocalizedstring-require-bundle
- nslocalizedstring_require_bundle

# Rationale: Unintuitive.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#number-separator
- number_separator

# Rationale: Doesn't really add anything other than telling someone how to code.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#object-literal
- object_literal

# Rationale: Old outdated convention.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#prefixed-top-level-constant
- prefixed_toplevel_constant

# Rationale: We don't use Quick.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#quick-discouraged-call
- quick_discouraged_call

# Rationale: We don't use Quick.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#quick-discouraged-focused-test
- quick_discouraged_focused_test

# Rationale: We don't use Quick.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#quick-discouraged-pending-test
- quick_discouraged_pending_test

# Rationale: The benefit of this rule is a minor performance improvement, at the potential cost of legibility. Leave up to the developer's discrection.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#reduce-into
- reduce_into

# Rationale: There are cases where you may want to declare the string enum value explicitly.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-string-enum-value
- redundant_string_enum_value

# Rationale: Do not require a deinit function, as it is not always necessary.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#required-deinit
- required_deinit

# Rationale: Usage of proper access level.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#strict-fileprivate
- strict_fileprivate

# Rationale: We don't use IB.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#strong-iboutlet
- strong_iboutlet

# Rationale: Custom rule overrides to allow todos when issue links are provided.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#todo
- todo

# Rationale: Naming the parameters can be important for clarity in some instances.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#trailing-closure
- trailing_closure

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#type-body-length
- type_body_length

# Rationale: Arbitrary restriction.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#type-name
- type_name

# Rationale: For typed parameters in closures, parentheses are required by swift, making this rule inherently inconsistent.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unneeded-parentheses-in-closure-argument
- unneeded_parentheses_in_closure_argument

# Rationale: Allows for more readable code when defining new properties or functions on types.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-whitespace-after-opening-braces
- vertical_whitespace_opening_braces

# Rationale: Unnecessary whitespace.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-whitespace-between-cases
- vertical_whitespace_between_cases

# Rationale: Allow using XCTest functions as defined by the framework.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#xctest-specific-matcher
- xct_specific_matcher

opt_in_rules: # some rules are only opt-in

# Rationale: When using map, we think of it being used to transform a current array into something else.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#array-init
- array_init

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#attributes
- attributes

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#block-based-kvo
- block_based_kvo

# Rationale: Prevents retain cycles.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#class-delegate-protocol
- class_delegate_protocol

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#closing-brace-spacing
- closing_brace

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#closure-end-indentation
- closure_end_indentation

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#closure-parameter-position
- closure_parameter_position

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#closure-spacing
- closure_spacing

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#collection_alignment
- collection_alignment

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#colon
- colon

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#comma-spacing
- comma

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#compiler-protocol-init
- compiler_protocol_init

# Rationale: Encourages usage of assertion failures and thinking about what you are returning.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#conditional-returns-on-newline
- conditional_returns_on_newline

# Rationale: A more clear and consise way to check if something exists.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#contains-over-first-not-nil
- contains_over_first_not_nil

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#control-statement
- control_statement

# Rationale: There is no need to have an instance of a type with static-only members.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#convenience_type
- convenience_type

# Rationale: Keep in check if availability check is still necessary.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#deployment_target
- deployment_target

# Rationale: Encourages proper memory practices.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#discarded-notification-center-observer
- discarded_notification_center_observer

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#discouraged-direct-initialization
- discouraged_direct_init

# Rationale: A nil bool is a tri-state variable which can be modeled more clearly.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#discouraged-optional-boolean
- discouraged_optional_boolean

# Rationale: Current implementation triggers on system APIs. Disabling until rule is configurable to fix this. An optional collection can have two "empty" states: nil and empty. If nil and empty are to mean different things, consider modeling it differently using an enum with associated values.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#discouraged-optional-collection
- discouraged_optional_collection

# Rationale: Ensures all enums can be switched upon.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#duplicate-enum-cases
- duplicate_enum_cases

# Rationale: Imports are not required more than once.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#duplicate-imports
- duplicate_imports

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#dynamic-inline
- dynamic_inline

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-count
- empty_count

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-enum-arguments
- empty_enum_arguments

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-parameters
- empty_parameters

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-parentheses-with-trailing-closure
- empty_parentheses_with_trailing_closure

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-string
- empty_string

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-xctest-method
- empty_xctest_method

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-init
- explicit_init

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#fallthrough
- fallthrough

# Rationale: Encourages better documentation.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#fatal-error-message
- fatal_error_message

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#file-header
#- file_header

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#file-types-order
#- file_types_order

# Rationale: Encourages using the right API to solve a problem.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#first-where
- first_where

# Rationale: Encourages using the right API to solve a problem.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#for-where
- for_where

# Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#force-cast
- force_cast

# Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#force-try
- force_try

# Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#force-unwrapping
- force_unwrapping

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#generic-type-name
- generic_type_name

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#identical-operands
- identical_operands

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#implicit-getter
- implicit_getter

# Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#implicitly-unwrapped-optional
- implicitly_unwrapped_optional

# Rationale: Encourages using the right API to solve a problem.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#is-disjoint
- is_disjoint

# Rationale: Provides clarity and consistency by using the default parameter.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#joined-default-parameter
- joined_default_parameter

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#last-where
- last_where

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#leading-whitespace
- leading_whitespace

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-cggeometry-functions
- legacy_cggeometry_functions

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-constant
- legacy_constant

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-constructor
- legacy_constructor

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-hashing
- legacy_hashing

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-multiple
- legacy_multiple

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-nsgeometry-functions
- legacy_nsgeometry_functions

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-random
- legacy_random

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#literal-expression-end-indentation
- literal_expression_end_indentation

# Rationale: Usage of proper access level.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#lower-acl-than-parent
- lower_acl_than_parent

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#mark
- mark

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#modifier-order
- modifier_order

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiline-function-chains
- multiline_function_chains

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiline-literal-brackets
- multiline_literal_brackets

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiline-parameters
- multiline_parameters

# Rationale: Clarity of code.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiple-closures-with-trailing-closure
- multiple_closures_with_trailing_closure

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#no-fallthrough-only
- no_fallthrough_only

# Rationale: Encourages coder best practices though language feature likely makes this obsolete.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#multiple-closures-with-trailing-closure
- notification_center_detachment

# Rationale: == is not used for NSObject comparison, and could lead to confusion.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#nsobject-prefer-isequal
- nsobject_prefer_isequal

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#opening-brace-spacing
- opening_brace

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#operator-usage-whitespace
- operator_usage_whitespace

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#operator-function-whitespace
- operator_whitespace

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#overridden-methods-call-super
- overridden_super_call

# Rationale: Prevents unpredictable behavior.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#override-in-extension
- override_in_extension

# Rationale: Promotes consistency and reduces duplication.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#pattern-matching-keywords
- pattern_matching_keywords

# Rationale: UI elements should only be configurable by their owners and not be exposed to others.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#private-actions
- private_action

# Rationale: UI elements should only be configurable by their owners and not be exposed to others.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#private-outlets
- private_outlet

# Rationale: Keep internal details from being overexposed.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#private-over-fileprivate
- private_over_fileprivate

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#private-unit-test
- private_unit_test

# Rationale: We don't use IB, create interface in code instead.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#prohibited-calls-to-super
- prohibited_interface_builder

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#prohibited-calls-to-super
- prohibited_super_call

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#protocol-property-accessors-order
- protocol_property_accessors_order

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#reduce-boolean
- reduce_boolean

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-discardable-let
- redundant_discardable_let

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-nil-coalescing
- redundant_nil_coalescing

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-objc-attribute
- redundant_objc_attribute

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-optional-initialization
- redundant_optional_initialization

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-set-access-control-rule
- redundant_set_access_control

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-type-annotation
- redundant_type_annotation

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-void-return
- redundant_void_return

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#required-enum-case
- required_enum_case

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#returning-whitespace
- return_arrow_whitespace

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#shorthand-operator
- shorthand_operator

# Rationale: There should be only XCTestCase per file.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#single-test-class
- single_test_class

# Rationale: Provides consistency and clarity in coding style and is less code.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#min-or-max-over-sorted-first-or-last
- sorted_first_last

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#sorted-imports
- sorted_imports

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#statement-position
- statement_position

# Rationale: Provides clarity and consistency.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#static-operator
- static_operator

# Rationale: Provides cleaniness of code.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#superfluous-disable-command
- superfluous_disable_command

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#switch-and-case-statement-alignment
- switch_case_alignment

# Rationale: Provides clarity and consistency.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#switch-case-on-newline
- switch_case_on_newline

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#syntactic-sugar
- syntactic_sugar

# Rationale: Encourages documentation.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#todo
- todo

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#toggle-bool
- toggle_bool

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#trailing-comma
- trailing_comma

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#trailing-newline
- trailing_newline

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#trailing-semicolon
- trailing_semicolon

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#trailing-whitespace
- trailing_whitespace

# Rationale: Provides consistency of ordering within a type.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#type-contents-order
- type_contents_order

# Rationale: Provides clarity on which methods should not be used.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unavailable-function
- unavailable_function

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unneeded-break-in-switch
- unneeded_break_in_switch

# Rationale: Prevents issues with using unowned.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unowned-variable-capture
- unowned_variable_capture

# Rationale: Provides clarity on which error is expected.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#untyped-error-in-catch
- untyped_error_in_catch

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-capture-list
- unused_capture_list

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-closure-parameter
- unused_closure_parameter

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-control-flow-label
- unused_control_flow_label

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-enumerated
- unused_enumerated

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-import
- unused_import

# Rationale: Provides consistency in coding style and brevity.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-optional-binding
- unused_optional_binding

# Rationale: Avoids issues where the setter is not using the value passed in.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#unused-setter-value
- unused_setter_value

# Rationale: Prevents coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#valid-ibinspectable
- valid_ibinspectable

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-parameter-alignment
- vertical_parameter_alignment

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-parameter-alignment-on-call
- vertical_parameter_alignment_on_call

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-whitespace
- vertical_whitespace

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#vertical-whitespace-before-closing-braces
- vertical_whitespace_closing_braces

# Rationale: Provides consistency in coding style and follows modern practices of the language.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#void-return
- void_return

# Rationale: Prevents retain cycles and coder error.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#weak-delegate
- weak_delegate

# Rationale: Encourages better documentation.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#xctfail-message
- xctfail_message

# Rationale: Provides consistency in coding style.
# https://github.com/realm/SwiftLint/blob/master/Rules.md#yoda-condition-rule
- yoda_condition

excluded: # paths to ignore during linting. Takes precedence over `included`.
- VideoliticTests

line_length:
    warning: 150
    error: 200
    ignores_function_declarations: true
    ignores_comments: true
    ignores_urls: true

file_types_order:
    custom:
        - supporting_types
        - main_type
        - extensions

type_contents_order:
    order:
        - associated_type
        - type_alias
        - subtype
        - case
        - type_property
        - instance_property
        - initializer
